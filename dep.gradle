import groovy.json.JsonOutput

ext {
    depUpdateReport = file("$buildDir/dependencies/update-report.json")
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            def contains = { String ptn -> { String ver -> ver.contains(ptn) || ver.contains(ptn.toUpperCase()) } }
            def patterns = [
                    [ptn: 'alpha', pred: contains],
                    [ptn: 'beta', pred: contains],
                    [ptn: 'rc', pred: contains],
                    [ptn: '.+[\\.-]M\\p{Digit}$', pred: { String p -> {
                        String ver -> ver.matches(p)
                    } }]
            ]
            def rejected = patterns.any { check ->
                def predicate = check.pred(check.ptn)
                def version = selection.candidate.version
                predicate(version)
            }
            if (rejected) {
                logger.info('{}:{}:{}', selection.candidate.group, selection.candidate.module, selection.candidate.version)
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyUpdates {
    checkForGradleUpdate = true
    outputFormatter = { result ->
        def updates = result.outdated.dependencies
        if (updates.empty) {
            println 'dependencies up to date'
            return
        }
        def list = updates.collect {
            [group: it.group,
             name: it.name,
             current: "${it.version}",
             available: it.available.milestone]
        }
        list.each { println it }
        File report = depUpdateReport
        if (!report.parentFile.exists()) {
            report.parentFile.mkdirs()
        }
        report.write(JsonOutput.toJson(list), 'UTF-8')
    }
}
