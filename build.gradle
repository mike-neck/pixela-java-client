plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

ext {
    junitVersion = '5.3.2'
    jacksonVersion = '2.9.8'
    reactorVersion = '3.2.3.RELEASE'
}

group = 'org.mikeneck.pixela'
version = '0.1'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    api project(':pixela-java-client-api')
    implementation project(':pixela-java-client-default-impl')

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeClasspath "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: reactorVersion
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
    testRuntimeClasspath group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit-assertj', version: '2.2.0'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.2'
}

task testReport(type: TestReport) {
    reportOn subprojects*.tasks*.withType(Test)
    destinationDir = file("$buildDir/reports/tests/test")
    group = 'verification'
}

task jacocoMerge(type: JacocoMerge) {
    group = 'coverage'

    dependsOn subprojects*.tasks*.withType(Test)

    executionData((tasks as TaskContainer).getByPath(':pixela-java-client-api:test'))
    executionData((tasks as TaskContainer).getByPath(':pixela-java-client-default-impl:test'))
}

task jacocoReport(type: JacocoReport) {
    group = 'coverage'

    dependsOn 'jacocoMerge'

    executionData tasks.withType(JacocoMerge).findAll { it.name == 'jacocoMerge' }
    additionalSourceDirs files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalClassDirs files(subprojects.sourceSets.main.output)
    reports {
        xml.enabled = true
        xml.destination = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
        html.enabled = true
        html.destination = file("$buildDir/jacoco/report-html")
    }
}

task jacoco {
    group = 'coverage'
    dependsOn 'jacocoReport'
}

task qualityCheck {
    group = 'verification'
    dependsOn 'jacoco'
    finalizedBy 'testReport'
}

coveralls {
    saveAsFile = true
    sendToCoveralls = false
    saveFilePath = 'build/jacoco/coveralls.json'
    jacocoReportPath = "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
}
