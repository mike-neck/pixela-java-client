/*
 * Copyright 2018 Shinya Mochida
 *
 * Licensed under the Apache License,Version2.0(the"License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,software
 * Distributed under the License is distributed on an"AS IS"BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pixela.client.api.user;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Properties;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import pixela.client.*;
import pixela.client.api.graph.CreateGraph;
import pixela.client.api.graph.GetGraphDefinitions;
import pixela.client.api.graph.PostPixel;
import pixela.client.http.HttpClient;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

public class PixelaImpl implements Pixela {

  private static final String USERS_PATH = "/v1/users";

  @NotNull private final HttpClient httpClient;
  @NotNull private final UserToken userToken;
  @NotNull private final Username username;

  private PixelaImpl(
      @NotNull final HttpClient httpClient,
      @NotNull final UserToken userToken,
      @NotNull final Username username) {
    this.httpClient = httpClient;
    this.userToken = userToken;
    this.username = username;
  }

  public interface PixelaToken {
    @NotNull
    Pixela token(@NotNull final String token);
  }

  @Contract("_, _, _ -> new")
  @NotNull
  public static Pixela of(
      @NotNull final HttpClient httpClient,
      @NotNull final UserToken userToken,
      @NotNull final Username username) {
    return new PixelaImpl(httpClient, userToken, username);
  }

  @NotNull
  public static Pixela fromProperties(
      @NotNull final HttpClient httpClient, @NotNull final Properties properties) {
    final String token = properties.getProperty(UserToken.USER_TOKEN_PROPERTY_KEY);
    if (token == null) {
      throw ApiException.of("Token not found in pixela.properties.");
    }
    final String username = properties.getProperty(Username.USER_NAME_PROPERTY_KEY);
    if (username == null) {
      throw ApiException.of("Username not found in pixela.properties.");
    }
    return new PixelaImpl(httpClient, UserToken.of(token), Username.of(username));
  }

  @NotNull
  @Override
  public URI usersUri(@NotNull final URI baseUri) {
    final String string = baseUri.toASCIIString() + USERS_PATH + username.path();
    return URI.create(string);
  }

  @NotNull
  @Override
  public String usersUri() {
    return USERS_PATH + username.path();
  }

  @NotNull
  @Override
  public UserToken token() {
    return userToken;
  }

  @NotNull
  @Override
  public Mono<Pixela> usingClient(@NotNull final HttpClient client) {
    return Mono.fromCallable(
        () -> {
          try (final AutoCloseable ignore = httpClient) {
            return of(client, userToken, username);
          }
        });
  }

  @NotNull
  @Override
  public Mono<Void> persistAsFile(@NotNull final Path file) {
    return Mono.<Void>fromRunnable(
            () -> {
              final Properties properties = new Properties();
              properties.setProperty(UserToken.USER_TOKEN_PROPERTY_KEY, userToken.tokenValue());
              properties.setProperty(Username.USER_NAME_PROPERTY_KEY, username.value());
              try (final Writer writer =
                  Files.newBufferedWriter(
                      file, StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW)) {
                properties.store(writer, "Generated by " + PixelaImpl.class.getCanonicalName());
              } catch (final IOException e) {
                throw new UncheckedIOException(e);
              }
            })
        .subscribeOn(Schedulers.elastic());
  }

  @NotNull
  @Override
  public DeleteUser deleteUser() {
    return DeleteUser.of(httpClient, userToken, username);
  }

  @NotNull
  @Override
  public CreateGraph.Id createGraph() {
    return CreateGraph.builder(httpClient, this);
  }

  @NotNull
  @Override
  public GetGraphDefinitions getGraphDefinitions() {
    return GetGraphDefinitions.of(httpClient, this);
  }

  @NotNull
  @Override
  public PostPixel.PixelDate postPixel(@NotNull final GraphId graphId) {
    return Graph.simple(httpClient, this, graphId).postPixel();
  }

  @NotNull
  @Override
  public Graph graph(@NotNull final GraphId graphId) {
    return Graph.simple(httpClient, this, graphId);
  }

  @Override
  public String toString() {
    @SuppressWarnings("StringBufferReplaceableByString")
    final StringBuilder sb = new StringBuilder("Pixela{");
    sb.append("userToken=").append(userToken);
    sb.append(", username=").append(username);
    sb.append('}');
    return sb.toString();
  }
}
